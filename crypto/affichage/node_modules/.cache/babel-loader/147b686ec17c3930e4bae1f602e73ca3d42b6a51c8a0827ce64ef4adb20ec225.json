{"ast":null,"code":"export default {\n  /* eslint-disable no-unused-vars */\n  data() {\n    return {\n      email: '',\n      password: '',\n      pinRequired: false,\n      loading: false,\n      errorMessage: ''\n    };\n  },\n  /* eslint-enable no-unused-vars */\n\n  methods: {\n    async login() {\n      this.loading = true;\n      this.errorMessage = '';\n      const loginrequest = {\n        Email: this.email,\n        MotDePasse: this.password\n      };\n      try {\n        const response = await fetch('http://localhost:5000/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(loginrequest)\n        });\n        const data = await response.json();\n        if (!response.ok) {\n          // Gérer les erreurs retournées par l'API\n          this.errorMessage = data.message || 'Une erreur est survenue.';\n          return;\n        }\n\n        // Exemple : redirection vers une page\n        // this.$router.push('/AuthLogin.vue');\n        this.pinRequired = true;\n      } catch (error) {\n        this.errorMessage;\n      } finally {\n        this.loading = false;\n      }\n    },\n    async verifyPin() {\n      this.loading = true;\n      this.errorMessage = \"\";\n      const pinRequest = {\n        Email: this.email,\n        Pin: this.pin\n      };\n      try {\n        const response = await fetch(\"http://localhost:5000/Authentification\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(pinRequest)\n        });\n        const data = await response.json();\n        if (!response.ok) {\n          this.errorMessage = data.message || \"Code PIN invalide.\";\n          return;\n        }\n\n        // Store the token if needed\n        localStorage.setItem(\"auth_token\", data.token);\n        console.log(\"hereeee \" + data.token);\n        this.$emit('goToHome');\n      } catch (error) {\n        this.errorMessage;\n      } finally {\n        this.loading = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","email","password","pinRequired","loading","errorMessage","methods","login","loginrequest","Email","MotDePasse","response","fetch","method","headers","body","JSON","stringify","json","ok","message","error","verifyPin","pinRequest","Pin","pin","localStorage","setItem","token","console","log","$emit"],"sources":["C:\\Users\\Zotah\\S5\\ROJO\\exam\\FornisseurIdentite\\crypto\\affichage\\src\\components\\UserLogin.vue"],"sourcesContent":["<template>\r\n  <div class=\"login\">\r\n    <h2>Connexion</h2>\r\n    <form v-if=\"!pinRequired\" @submit.prevent=\"login\">\r\n      <div class=\"input-group\">\r\n        <label for=\"email\">Email</label>\r\n        <input v-model=\"email\" type=\"email\" id=\"email\" required placeholder=\"Votre adresse email\" />\r\n      </div>\r\n      <div class=\"input-group\">\r\n        <label for=\"password\">Mot de passe</label>\r\n        <input v-model=\"password\" type=\"password\" id=\"password\" required placeholder=\"Votre mot de passe\" />\r\n      </div>\r\n      <button type=\"submit\" :disabled=\"loading\">\r\n        {{ loading ? \"Connexion...\" : \"Se connecter\" }}\r\n      </button>\r\n    </form>\r\n    \r\n\r\n     <form v-else @submit.prevent=\"verifyPin\">\r\n      <div class=\"input-group\">\r\n        <label for=\"pin\">Code PIN</label>\r\n        <input v-model=\"pin\" type=\"text\" id=\"pin\" required placeholder=\"Entrez le code PIN reçu\" />\r\n      </div>\r\n      <button type=\"submit\" :disabled=\"loading\">\r\n        {{ loading ? \"Vérification...\" : \"Valider le code PIN\" }}\r\n      </button>\r\n    </form>\r\n\r\n    <form @submit.prevent=\"redirection\">\r\n      <button type=\"submit\">\r\n        {{ \"Tester redirection\" }}\r\n      </button></form>\r\n\r\n    <p v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n/* eslint-disable no-unused-vars */\r\ndata() {\r\n  return {\r\n    email: '',\r\n    password: '',\r\n    pinRequired: false,\r\n    loading: false,\r\n    errorMessage: '',\r\n  };\r\n},\r\n/* eslint-enable no-unused-vars */\r\n\r\n  methods: {\r\n    async login() {\r\n      this.loading = true;\r\n      this.errorMessage = '';\r\n\r\n      const loginrequest = {\r\n        Email: this.email,\r\n        MotDePasse: this.password,\r\n      };\r\n\r\n      try {\r\n        const response = await fetch('http://localhost:5000/login', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(loginrequest),\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (!response.ok) {\r\n          // Gérer les erreurs retournées par l'API\r\n          this.errorMessage = data.message || 'Une erreur est survenue.';\r\n          return;\r\n        }\r\n\r\n        // Exemple : redirection vers une page\r\n        // this.$router.push('/AuthLogin.vue');\r\n        this.pinRequired = true;\r\n      } catch (error) {\r\n        this.errorMessage;\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n\r\n    async verifyPin() {\r\n      this.loading = true;\r\n      this.errorMessage = \"\";\r\n\r\n      const pinRequest = {\r\n          Email: this.email,\r\n          Pin: this.pin,\r\n      };\r\n\r\n      try {\r\n          const response = await fetch(\"http://localhost:5000/Authentification\", {\r\n              method: \"POST\",\r\n              headers: {\r\n                  \"Content-Type\": \"application/json\",\r\n              },\r\n              body: JSON.stringify(pinRequest),\r\n          });\r\n\r\n          const data = await response.json();\r\n\r\n          if (!response.ok) {\r\n              this.errorMessage = data.message || \"Code PIN invalide.\";\r\n              return;\r\n          }\r\n\r\n          // Store the token if needed\r\n          localStorage.setItem(\"auth_token\", data.token);\r\n          console.log(\"hereeee \"+ data.token);\r\n\r\n          this.$emit('goToHome'); \r\n      } catch (error) {\r\n          this.errorMessage;\r\n      } finally {\r\n          this.loading = false;\r\n      }\r\n  }\r\n  }\r\n};\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n/* Global reset for consistent styling */\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n  font-family: 'Arial', sans-serif;\r\n  background-color: #121212; /* Dark background for a crypto feel */\r\n  color: #e4e4e4; /* Light text for contrast */\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n}\r\n\r\n.login {\r\n  background-color: #1e1e1e; /* Slightly lighter dark background */\r\n  padding: 30px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.6);\r\n  width: 100%;\r\n  max-width: 400px;\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  font-size: 24px;\r\n  margin-bottom: 20px;\r\n  color: #00ff88; /* Crypto green accent */\r\n}\r\n\r\n.input-group {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.input-group label {\r\n  display: block;\r\n  font-size: 14px;\r\n  color: #bbb;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.input-group input {\r\n  width: 100%;\r\n  padding: 12px;\r\n  background-color: #333; /* Dark input background */\r\n  color: #e4e4e4;\r\n  border: 2px solid #444;\r\n  border-radius: 4px;\r\n  font-size: 16px;\r\n  transition: border-color 0.3s ease-in-out;\r\n}\r\n\r\n.input-group input:focus {\r\n  border-color: #00ff88; /* Green border on focus */\r\n  outline: none;\r\n}\r\n\r\nbutton {\r\n  width: 100%;\r\n  padding: 12px;\r\n  background-color: #00ff88; /* Crypto green */\r\n  border: none;\r\n  border-radius: 4px;\r\n  color: white;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease-in-out;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #00cc6a; /* Darker green on hover */\r\n}\r\n\r\nbutton:focus {\r\n  outline: none;\r\n}\r\n\r\n@media (max-width: 400px) {\r\n  .login {\r\n    padding: 20px;\r\n    width: 90%;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 20px;\r\n  }\r\n\r\n  .input-group input, button {\r\n    padding: 10px;\r\n    font-size: 14px;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"AAsCA,eAAe;EACf;EACAA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,WAAW,EAAE,KAAK;MAClBC,OAAO,EAAE,KAAK;MACdC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACD;;EAEEC,OAAO,EAAE;IACP,MAAMC,KAAKA,CAAA,EAAG;MACZ,IAAI,CAACH,OAAM,GAAI,IAAI;MACnB,IAAI,CAACC,YAAW,GAAI,EAAE;MAEtB,MAAMG,YAAW,GAAI;QACnBC,KAAK,EAAE,IAAI,CAACR,KAAK;QACjBS,UAAU,EAAE,IAAI,CAACR;MACnB,CAAC;MAED,IAAI;QACF,MAAMS,QAAO,GAAI,MAAMC,KAAK,CAAC,6BAA6B,EAAE;UAC1DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,YAAY;QACnC,CAAC,CAAC;QAEF,MAAMR,IAAG,GAAI,MAAMW,QAAQ,CAACO,IAAI,CAAC,CAAC;QAElC,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;UAChB;UACA,IAAI,CAACd,YAAW,GAAIL,IAAI,CAACoB,OAAM,IAAK,0BAA0B;UAC9D;QACF;;QAEA;QACA;QACA,IAAI,CAACjB,WAAU,GAAI,IAAI;MACzB,EAAE,OAAOkB,KAAK,EAAE;QACd,IAAI,CAAChB,YAAY;MACnB,UAAU;QACR,IAAI,CAACD,OAAM,GAAI,KAAK;MACtB;IACF,CAAC;IAED,MAAMkB,SAASA,CAAA,EAAG;MAChB,IAAI,CAAClB,OAAM,GAAI,IAAI;MACnB,IAAI,CAACC,YAAW,GAAI,EAAE;MAEtB,MAAMkB,UAAS,GAAI;QACfd,KAAK,EAAE,IAAI,CAACR,KAAK;QACjBuB,GAAG,EAAE,IAAI,CAACC;MACd,CAAC;MAED,IAAI;QACA,MAAMd,QAAO,GAAI,MAAMC,KAAK,CAAC,wCAAwC,EAAE;UACnEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACL,cAAc,EAAE;UACpB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACM,UAAU;QACnC,CAAC,CAAC;QAEF,MAAMvB,IAAG,GAAI,MAAMW,QAAQ,CAACO,IAAI,CAAC,CAAC;QAElC,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;UACd,IAAI,CAACd,YAAW,GAAIL,IAAI,CAACoB,OAAM,IAAK,oBAAoB;UACxD;QACJ;;QAEA;QACAM,YAAY,CAACC,OAAO,CAAC,YAAY,EAAE3B,IAAI,CAAC4B,KAAK,CAAC;QAC9CC,OAAO,CAACC,GAAG,CAAC,UAAU,GAAE9B,IAAI,CAAC4B,KAAK,CAAC;QAEnC,IAAI,CAACG,KAAK,CAAC,UAAU,CAAC;MAC1B,EAAE,OAAOV,KAAK,EAAE;QACZ,IAAI,CAAChB,YAAY;MACrB,UAAU;QACN,IAAI,CAACD,OAAM,GAAI,KAAK;MACxB;IACJ;EACA;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}