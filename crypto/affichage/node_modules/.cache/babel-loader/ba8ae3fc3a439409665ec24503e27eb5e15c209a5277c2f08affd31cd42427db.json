{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"login\"\n};\nconst _hoisted_2 = {\n  class: \"input-group\"\n};\nconst _hoisted_3 = {\n  class: \"input-group\"\n};\nconst _hoisted_4 = [\"disabled\"];\nconst _hoisted_5 = {\n  class: \"input-group\"\n};\nconst _hoisted_6 = [\"disabled\"];\nconst _hoisted_7 = {\n  key: 2,\n  class: \"error-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[10] || (_cache[10] = _createElementVNode(\"h2\", null, \"Connexion\", -1 /* HOISTED */)), !$data.pinRequired ? (_openBlock(), _createElementBlock(\"form\", {\n    key: 0,\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.login && $options.login(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", _hoisted_2, [_cache[6] || (_cache[6] = _createElementVNode(\"label\", {\n    for: \"email\"\n  }, \"Email\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.email = $event),\n    type: \"email\",\n    id: \"email\",\n    required: \"\",\n    placeholder: \"Votre adresse email\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.email]])]), _createElementVNode(\"div\", _hoisted_3, [_cache[7] || (_cache[7] = _createElementVNode(\"label\", {\n    for: \"password\"\n  }, \"Mot de passe\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.password = $event),\n    type: \"password\",\n    id: \"password\",\n    required: \"\",\n    placeholder: \"Votre mot de passe\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.password]])]), _createElementVNode(\"button\", {\n    type: \"submit\",\n    disabled: $data.loading\n  }, _toDisplayString($data.loading ? \"Connexion...\" : \"Se connecter\"), 9 /* TEXT, PROPS */, _hoisted_4)], 32 /* NEED_HYDRATION */)) : (_openBlock(), _createElementBlock(\"form\", {\n    key: 1,\n    onSubmit: _cache[4] || (_cache[4] = _withModifiers((...args) => $options.verifyPin && $options.verifyPin(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", _hoisted_5, [_cache[8] || (_cache[8] = _createElementVNode(\"label\", {\n    for: \"pin\"\n  }, \"Code PIN\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => _ctx.pin = $event),\n    type: \"text\",\n    id: \"pin\",\n    required: \"\",\n    placeholder: \"Entrez le code PIN reçu\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.pin]])]), _createElementVNode(\"button\", {\n    type: \"submit\",\n    disabled: $data.loading\n  }, _toDisplayString($data.loading ? \"Vérification...\" : \"Valider le code PIN\"), 9 /* TEXT, PROPS */, _hoisted_6)], 32 /* NEED_HYDRATION */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[5] || (_cache[5] = _withModifiers((...args) => _ctx.redirection && _ctx.redirection(...args), [\"prevent\"]))\n  }, _cache[9] || (_cache[9] = [_createElementVNode(\"button\", {\n    type: \"submit\"\n  }, _toDisplayString(\"Tester redirection\"), -1 /* HOISTED */)]), 32 /* NEED_HYDRATION */), $data.errorMessage ? (_openBlock(), _createElementBlock(\"p\", _hoisted_7, _toDisplayString($data.errorMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","$data","pinRequired","onSubmit","_cache","_withModifiers","args","$options","login","_hoisted_2","for","$event","email","type","id","required","placeholder","_hoisted_3","password","disabled","loading","_hoisted_4","verifyPin","_hoisted_5","_ctx","pin","_hoisted_6","redirection","_toDisplayString","errorMessage","_hoisted_7","_createCommentVNode"],"sources":["C:\\Users\\Zotah\\S5\\ROJO\\exam\\FornisseurIdentite\\crypto\\affichage\\src\\components\\UserLogin.vue"],"sourcesContent":["<template>\r\n  <div class=\"login\">\r\n    <h2>Connexion</h2>\r\n    <form v-if=\"!pinRequired\" @submit.prevent=\"login\">\r\n      <div class=\"input-group\">\r\n        <label for=\"email\">Email</label>\r\n        <input v-model=\"email\" type=\"email\" id=\"email\" required placeholder=\"Votre adresse email\" />\r\n      </div>\r\n      <div class=\"input-group\">\r\n        <label for=\"password\">Mot de passe</label>\r\n        <input v-model=\"password\" type=\"password\" id=\"password\" required placeholder=\"Votre mot de passe\" />\r\n      </div>\r\n      <button type=\"submit\" :disabled=\"loading\">\r\n        {{ loading ? \"Connexion...\" : \"Se connecter\" }}\r\n      </button>\r\n    </form>\r\n    \r\n\r\n     <form v-else @submit.prevent=\"verifyPin\">\r\n      <div class=\"input-group\">\r\n        <label for=\"pin\">Code PIN</label>\r\n        <input v-model=\"pin\" type=\"text\" id=\"pin\" required placeholder=\"Entrez le code PIN reçu\" />\r\n      </div>\r\n      <button type=\"submit\" :disabled=\"loading\">\r\n        {{ loading ? \"Vérification...\" : \"Valider le code PIN\" }}\r\n      </button>\r\n    </form>\r\n\r\n    <form @submit.prevent=\"redirection\">\r\n      <button type=\"submit\">\r\n        {{ \"Tester redirection\" }}\r\n      </button></form>\r\n\r\n    <p v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n/* eslint-disable no-unused-vars */\r\ndata() {\r\n  return {\r\n    email: '',\r\n    password: '',\r\n    pinRequired: false,\r\n    loading: false,\r\n    errorMessage: '',\r\n  };\r\n},\r\n/* eslint-enable no-unused-vars */\r\n\r\n  methods: {\r\n    async login() {\r\n      this.loading = true;\r\n      this.errorMessage = '';\r\n\r\n      const loginrequest = {\r\n        Email: this.email,\r\n        MotDePasse: this.password,\r\n      };\r\n\r\n      try {\r\n        const response = await fetch('http://localhost:5000/login', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(loginrequest),\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (!response.ok) {\r\n          // Gérer les erreurs retournées par l'API\r\n          this.errorMessage = data.message || 'Une erreur est survenue.';\r\n          return;\r\n        }\r\n\r\n        // Exemple : redirection vers une page\r\n        // this.$router.push('/AuthLogin.vue');\r\n        this.pinRequired = true;\r\n      } catch (error) {\r\n        this.errorMessage;\r\n      } finally {\r\n        this.loading = false;\r\n      }\r\n    },\r\n\r\n    async verifyPin() {\r\n      this.loading = true;\r\n      this.errorMessage = \"\";\r\n\r\n      const pinRequest = {\r\n          Email: this.email,\r\n          Pin: this.pin,\r\n      };\r\n\r\n      try {\r\n          const response = await fetch(\"http://localhost:5000/Authentification\", {\r\n              method: \"POST\",\r\n              headers: {\r\n                  \"Content-Type\": \"application/json\",\r\n              },\r\n              body: JSON.stringify(pinRequest),\r\n          });\r\n\r\n          const data = await response.json();\r\n\r\n          if (!response.ok) {\r\n              this.errorMessage = data.message || \"Code PIN invalide.\";\r\n              return;\r\n          }\r\n\r\n          // Store the token if needed\r\n          localStorage.setItem(\"auth_token\", data.token);\r\n          this.$emit('goToHome'); \r\n      } catch (error) {\r\n          this.errorMessage;\r\n      } finally {\r\n          this.loading = false;\r\n      }\r\n  }\r\n  }\r\n};\r\n\r\n\r\n</script>\r\n\r\n<style scoped>\r\n/* Global reset for consistent styling */\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n  font-family: 'Arial', sans-serif;\r\n  background-color: #121212; /* Dark background for a crypto feel */\r\n  color: #e4e4e4; /* Light text for contrast */\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n}\r\n\r\n.login {\r\n  background-color: #1e1e1e; /* Slightly lighter dark background */\r\n  padding: 30px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.6);\r\n  width: 100%;\r\n  max-width: 400px;\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  font-size: 24px;\r\n  margin-bottom: 20px;\r\n  color: #00ff88; /* Crypto green accent */\r\n}\r\n\r\n.input-group {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.input-group label {\r\n  display: block;\r\n  font-size: 14px;\r\n  color: #bbb;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.input-group input {\r\n  width: 100%;\r\n  padding: 12px;\r\n  background-color: #333; /* Dark input background */\r\n  color: #e4e4e4;\r\n  border: 2px solid #444;\r\n  border-radius: 4px;\r\n  font-size: 16px;\r\n  transition: border-color 0.3s ease-in-out;\r\n}\r\n\r\n.input-group input:focus {\r\n  border-color: #00ff88; /* Green border on focus */\r\n  outline: none;\r\n}\r\n\r\nbutton {\r\n  width: 100%;\r\n  padding: 12px;\r\n  background-color: #00ff88; /* Crypto green */\r\n  border: none;\r\n  border-radius: 4px;\r\n  color: white;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease-in-out;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #00cc6a; /* Darker green on hover */\r\n}\r\n\r\nbutton:focus {\r\n  outline: none;\r\n}\r\n\r\n@media (max-width: 400px) {\r\n  .login {\r\n    padding: 20px;\r\n    width: 90%;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 20px;\r\n  }\r\n\r\n  .input-group input, button {\r\n    padding: 10px;\r\n    font-size: 14px;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAO;;EAGTA,KAAK,EAAC;AAAa;;EAInBA,KAAK,EAAC;AAAa;mBAR9B;;EAmBWA,KAAK,EAAC;AAAa;mBAnB9B;;EAAAC,GAAA;EAiC2BD,KAAK,EAAC;;;uBAhC/BE,mBAAA,CAiCM,OAjCNC,UAiCM,G,4BAhCJC,mBAAA,CAAkB,YAAd,WAAS,sB,CACAC,KAAA,CAAAC,WAAW,I,cAAxBJ,mBAAA,CAYO;IAfXD,GAAA;IAG+BM,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAHrCC,cAAA,KAAAC,IAAA,KAG+CC,QAAA,CAAAC,KAAA,IAAAD,QAAA,CAAAC,KAAA,IAAAF,IAAA,CAAK;MAC9CN,mBAAA,CAGM,OAHNS,UAGM,G,0BAFJT,mBAAA,CAAgC;IAAzBU,GAAG,EAAC;EAAO,GAAC,OAAK,sB,gBACxBV,mBAAA,CAA4F;IANpG,uBAAAI,MAAA,QAAAA,MAAA,MAAAO,MAAA,IAMwBV,KAAA,CAAAW,KAAK,GAAAD,MAAA;IAAEE,IAAI,EAAC,OAAO;IAACC,EAAE,EAAC,OAAO;IAACC,QAAQ,EAAR,EAAQ;IAACC,WAAW,EAAC;iDAApDf,KAAA,CAAAW,KAAK,E,KAEvBZ,mBAAA,CAGM,OAHNiB,UAGM,G,0BAFJjB,mBAAA,CAA0C;IAAnCU,GAAG,EAAC;EAAU,GAAC,cAAY,sB,gBAClCV,mBAAA,CAAoG;IAV5G,uBAAAI,MAAA,QAAAA,MAAA,MAAAO,MAAA,IAUwBV,KAAA,CAAAiB,QAAQ,GAAAP,MAAA;IAAEE,IAAI,EAAC,UAAU;IAACC,EAAE,EAAC,UAAU;IAACC,QAAQ,EAAR,EAAQ;IAACC,WAAW,EAAC;iDAA7Df,KAAA,CAAAiB,QAAQ,E,KAE1BlB,mBAAA,CAES;IAFDa,IAAI,EAAC,QAAQ;IAAEM,QAAQ,EAAElB,KAAA,CAAAmB;sBAC5BnB,KAAA,CAAAmB,OAAO,0DAblBC,UAAA,E,6CAkBKvB,mBAAA,CAQM;IA1BXD,GAAA;IAkBmBM,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAlBzBC,cAAA,KAAAC,IAAA,KAkBmCC,QAAA,CAAAe,SAAA,IAAAf,QAAA,CAAAe,SAAA,IAAAhB,IAAA,CAAS;MACtCN,mBAAA,CAGM,OAHNuB,UAGM,G,0BAFJvB,mBAAA,CAAiC;IAA1BU,GAAG,EAAC;EAAK,GAAC,UAAQ,sB,gBACzBV,mBAAA,CAA2F;IArBnG,uBAAAI,MAAA,QAAAA,MAAA,MAAAO,MAAA,IAqBwBa,IAAA,CAAAC,GAAG,GAAAd,MAAA;IAAEE,IAAI,EAAC,MAAM;IAACC,EAAE,EAAC,KAAK;IAACC,QAAQ,EAAR,EAAQ;IAACC,WAAW,EAAC;iDAA/CQ,IAAA,CAAAC,GAAG,E,KAErBzB,mBAAA,CAES;IAFDa,IAAI,EAAC,QAAQ;IAAEM,QAAQ,EAAElB,KAAA,CAAAmB;sBAC5BnB,KAAA,CAAAmB,OAAO,oEAxBlBM,UAAA,E,6BA4BI1B,mBAAA,CAGkB;IAHXG,QAAM,EAAAC,MAAA,QAAAA,MAAA,MA5BjBC,cAAA,KAAAC,IAAA,KA4B2BkB,IAAA,CAAAG,WAAA,IAAAH,IAAA,CAAAG,WAAA,IAAArB,IAAA,CAAW;gCAChCN,mBAAA,CAES;IAFDa,IAAI,EAAC;EAAQ,GAAAe,gBAAA,CAChB,oBAAoB,qB,6BAGlB3B,KAAA,CAAA4B,YAAY,I,cAArB/B,mBAAA,CAAmE,KAAnEgC,UAAmE,EAAAF,gBAAA,CAAnB3B,KAAA,CAAA4B,YAAY,oBAjChEE,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}