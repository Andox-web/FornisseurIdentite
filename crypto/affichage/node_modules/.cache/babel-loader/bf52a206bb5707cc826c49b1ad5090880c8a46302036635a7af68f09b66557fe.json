{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"signup\"\n};\nconst _hoisted_2 = {\n  class: \"input-group\"\n};\nconst _hoisted_3 = {\n  class: \"input-group\"\n};\nconst _hoisted_4 = {\n  class: \"input-group\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[8] || (_cache[8] = _createElementVNode(\"h2\", null, \"Inscription\", -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[3] || (_cache[3] = _withModifiers((...args) => $options.register && $options.register(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", _hoisted_2, [_cache[4] || (_cache[4] = _createElementVNode(\"label\", {\n    for: \"name\"\n  }, \"Nom\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.name = $event),\n    type: \"text\",\n    id: \"name\",\n    required: \"\",\n    placeholder: \"Votre nom\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.name]])]), _createElementVNode(\"div\", _hoisted_3, [_cache[5] || (_cache[5] = _createElementVNode(\"label\", {\n    for: \"email\"\n  }, \"Email\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.email = $event),\n    type: \"email\",\n    id: \"email\",\n    required: \"\",\n    placeholder: \"Votre email\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.email]])]), _createElementVNode(\"div\", _hoisted_4, [_cache[6] || (_cache[6] = _createElementVNode(\"label\", {\n    for: \"password\"\n  }, \"Mot de passe\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.password = $event),\n    type: \"password\",\n    id: \"password\",\n    required: \"\",\n    placeholder: \"Mot de passe\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.password]])]), _cache[7] || (_cache[7] = _createElementVNode(\"button\", {\n    type: \"submit\"\n  }, \"S'inscrire\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","onSubmit","_cache","_withModifiers","args","$options","register","_hoisted_2","for","$event","$data","name","type","id","required","placeholder","_hoisted_3","email","_hoisted_4","password"],"sources":["C:\\Users\\Zotah\\S5\\ROJO\\exam\\FornisseurIdentite\\crypto\\affichage\\src\\components\\UserSignup.vue"],"sourcesContent":["<template>\r\n  <div class=\"signup\">\r\n    <h2>Inscription</h2>\r\n    <form @submit.prevent=\"register\">\r\n      <div class=\"input-group\">\r\n        <label for=\"name\">Nom</label>\r\n        <input v-model=\"name\" type=\"text\" id=\"name\" required placeholder=\"Votre nom\" />\r\n      </div>\r\n      <div class=\"input-group\">\r\n        <label for=\"email\">Email</label>\r\n        <input v-model=\"email\" type=\"email\" id=\"email\" required placeholder=\"Votre email\" />\r\n      </div>\r\n      <div class=\"input-group\">\r\n        <label for=\"password\">Mot de passe</label>\r\n        <input v-model=\"password\" type=\"password\" id=\"password\" required placeholder=\"Mot de passe\" />\r\n      </div>\r\n      <button type=\"submit\">S'inscrire</button>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      name: '',\r\n      email: '',\r\n      password: '',\r\n    };\r\n  },\r\n  methods: {\r\n    async register() {\r\n      // Données à envoyer à l'API\r\n      const utilisateur = {\r\n        Nom: this.name,\r\n        Email: this.email,\r\n        MotDePasse: this.password,\r\n      };\r\n\r\n      try {\r\n        // Envoi de la requête POST à l'API .NET\r\n        const response = await fetch('http://localhost:5000/inscription', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(utilisateur),\r\n        });\r\n\r\n        // Vérification du statut de la réponse\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          alert(\"Inscription réussie. Un email de validation a été envoyé.\"); // Afficher la réponse du serveur\r\n        } else {\r\n          const errorData = await response.json();\r\n          alert('Erreur : ' + errorData); // Afficher un message d'erreur\r\n        }\r\n      } catch (error) {\r\n        console.log(error.Message); // Gestion des erreurs\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n/* Global reset for consistent styling */\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n  font-family: 'Arial', sans-serif;\r\n  background-color: #121212; /* Dark background */\r\n  color: #e4e4e4; /* Light text for contrast */\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100vh;\r\n}\r\n\r\n.signup {\r\n  background-color: #1e1e1e; /* Dark background for the form */\r\n  padding: 30px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.6);\r\n  width: 100%;\r\n  max-width: 400px;\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  font-size: 24px;\r\n  margin-bottom: 20px;\r\n  color: #00ff88; /* Crypto green accent */\r\n}\r\n\r\n.input-group {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.input-group label {\r\n  display: block;\r\n  font-size: 14px;\r\n  color: #bbb;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.input-group input {\r\n  width: 100%;\r\n  padding: 12px;\r\n  background-color: #333; /* Dark input background */\r\n  color: #e4e4e4;\r\n  border: 2px solid #444;\r\n  border-radius: 4px;\r\n  font-size: 16px;\r\n  transition: border-color 0.3s ease-in-out;\r\n}\r\n\r\n.input-group input:focus {\r\n  border-color: #00ff88; /* Green border on focus */\r\n  outline: none;\r\n}\r\n\r\nbutton {\r\n  width: 100%;\r\n  padding: 12px;\r\n  background-color: #00ff88; /* Crypto green */\r\n  border: none;\r\n  border-radius: 4px;\r\n  color: white;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s ease-in-out;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #00cc6a; /* Darker green on hover */\r\n}\r\n\r\nbutton:focus {\r\n  outline: none;\r\n}\r\n\r\n@media (max-width: 400px) {\r\n  .signup {\r\n    padding: 20px;\r\n    width: 90%;\r\n  }\r\n\r\n  h2 {\r\n    font-size: 20px;\r\n  }\r\n\r\n  .input-group input, button {\r\n    padding: 10px;\r\n    font-size: 14px;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAQ;;EAGVA,KAAK,EAAC;AAAa;;EAInBA,KAAK,EAAC;AAAa;;EAInBA,KAAK,EAAC;AAAa;;uBAX5BC,mBAAA,CAiBM,OAjBNC,UAiBM,G,0BAhBJC,mBAAA,CAAoB,YAAhB,aAAW,sBACfA,mBAAA,CAcO;IAdAC,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAHjBC,cAAA,KAAAC,IAAA,KAG2BC,QAAA,CAAAC,QAAA,IAAAD,QAAA,CAAAC,QAAA,IAAAF,IAAA,CAAQ;MAC7BJ,mBAAA,CAGM,OAHNO,UAGM,G,0BAFJP,mBAAA,CAA6B;IAAtBQ,GAAG,EAAC;EAAM,GAAC,KAAG,sB,gBACrBR,mBAAA,CAA+E;IANvF,uBAAAE,MAAA,QAAAA,MAAA,MAAAO,MAAA,IAMwBC,KAAA,CAAAC,IAAI,GAAAF,MAAA;IAAEG,IAAI,EAAC,MAAM;IAACC,EAAE,EAAC,MAAM;IAACC,QAAQ,EAAR,EAAQ;IAACC,WAAW,EAAC;iDAAjDL,KAAA,CAAAC,IAAI,E,KAEtBX,mBAAA,CAGM,OAHNgB,UAGM,G,0BAFJhB,mBAAA,CAAgC;IAAzBQ,GAAG,EAAC;EAAO,GAAC,OAAK,sB,gBACxBR,mBAAA,CAAoF;IAV5F,uBAAAE,MAAA,QAAAA,MAAA,MAAAO,MAAA,IAUwBC,KAAA,CAAAO,KAAK,GAAAR,MAAA;IAAEG,IAAI,EAAC,OAAO;IAACC,EAAE,EAAC,OAAO;IAACC,QAAQ,EAAR,EAAQ;IAACC,WAAW,EAAC;iDAApDL,KAAA,CAAAO,KAAK,E,KAEvBjB,mBAAA,CAGM,OAHNkB,UAGM,G,0BAFJlB,mBAAA,CAA0C;IAAnCQ,GAAG,EAAC;EAAU,GAAC,cAAY,sB,gBAClCR,mBAAA,CAA8F;IAdtG,uBAAAE,MAAA,QAAAA,MAAA,MAAAO,MAAA,IAcwBC,KAAA,CAAAS,QAAQ,GAAAV,MAAA;IAAEG,IAAI,EAAC,UAAU;IAACC,EAAE,EAAC,UAAU;IAACC,QAAQ,EAAR,EAAQ;IAACC,WAAW,EAAC;iDAA7DL,KAAA,CAAAS,QAAQ,E,+BAE1BnB,mBAAA,CAAyC;IAAjCY,IAAI,EAAC;EAAQ,GAAC,YAAU,qB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}