{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"cours-crypto\"\n};\nconst _hoisted_2 = {\n  class: \"dropdown-container\"\n};\nconst _hoisted_3 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[3] || (_cache[3] = _createElementVNode(\"h2\", null, \"Cours des Cryptomonnaies\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_2, [_cache[2] || (_cache[2] = _createElementVNode(\"label\", {\n    for: \"crypto-select\"\n  }, \"Choisir une cryptomonnaie :\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    id: \"crypto-select\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedCrypto = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.updateChart && $options.updateChart(...args))\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.cryptos, crypto => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: crypto.name,\n      value: crypto.name\n    }, _toDisplayString(crypto.name), 9 /* TEXT, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelSelect, $data.selectedCrypto]])]), _cache[4] || (_cache[4] = _createElementVNode(\"canvas\", {\n    id: \"cryptoChart\"\n  }, null, -1 /* HOISTED */))]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","for","id","_cache","$event","$data","selectedCrypto","onChange","args","$options","updateChart","_Fragment","_renderList","cryptos","crypto","key","name","value","_hoisted_3"],"sources":["C:\\Users\\Zotah\\S5\\ROJO\\exam\\FornisseurIdentite\\crypto\\affichage\\src\\components\\CoursCrypto.vue"],"sourcesContent":["<template>\r\n  <div class=\"cours-crypto\">\r\n    <h2>Cours des Cryptomonnaies</h2>\r\n    <div class=\"dropdown-container\">\r\n      <label for=\"crypto-select\">Choisir une cryptomonnaie :</label>\r\n      <select id=\"crypto-select\" v-model=\"selectedCrypto\" @change=\"updateChart\">\r\n        <option v-for=\"crypto in cryptos\" :key=\"crypto.name\" :value=\"crypto.name\">\r\n          {{ crypto.name }}\r\n        </option>\r\n      </select>\r\n    </div>\r\n    <canvas id=\"cryptoChart\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Chart, registerables } from \"chart.js\";\r\n\r\n// Enregistrement des composants nécessaires\r\nChart.register(...registerables);\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      cryptos: [\r\n        {\r\n          name: \"Bitcoin\",\r\n          prices: [50000, 52000, 54000, 53000, 54000],\r\n        },\r\n        {\r\n          name: \"Ethereum\",\r\n          prices: [3000, 3100, 3200, 3150, 3300],\r\n        },\r\n        {\r\n          name: \"Ripple\",\r\n          prices: [0.8, 0.85, 0.9, 0.88, 0.92],\r\n        },\r\n      ],\r\n      selectedCrypto: \"Bitcoin\", // Par défaut\r\n      chart: null,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.renderChart();\r\n  },\r\n  methods: {\r\n    renderChart() {\r\n      const ctx = document.getElementById(\"cryptoChart\").getContext(\"2d\");\r\n      const selectedCryptoData = this.cryptos.find(\r\n        (crypto) => crypto.name === this.selectedCrypto\r\n      );\r\n\r\n      // Création du graphique\r\n      this.chart = new Chart(ctx, {\r\n        type: \"line\",\r\n        data: {\r\n          labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\"],\r\n          datasets: [\r\n            {\r\n              label: `Prix ${this.selectedCrypto}`,\r\n              data: selectedCryptoData.prices,\r\n              borderColor: \"#ffcc00\",\r\n              borderWidth: 2,\r\n              backgroundColor: \"rgba(255, 204, 0, 0.1)\",\r\n              tension: 0.4,\r\n              pointRadius: 0,\r\n            },\r\n          ],\r\n        },\r\n        options: {\r\n          responsive: true,\r\n          maintainAspectRatio: false,\r\n          plugins: {\r\n            legend: {\r\n              display: false,\r\n            },\r\n            tooltip: {\r\n              mode: \"index\",\r\n              intersect: false,\r\n              backgroundColor: \"#2e2e3d\",\r\n              titleColor: \"#fff\",\r\n              bodyColor: \"#ccc\",\r\n            },\r\n          },\r\n          scales: {\r\n            x: {\r\n              grid: {\r\n                color: \"#3a3a4d\",\r\n              },\r\n              ticks: {\r\n                color: \"#ccc\",\r\n              },\r\n            },\r\n            y: {\r\n              grid: {\r\n                color: \"#3a3a4d\",\r\n              },\r\n              ticks: {\r\n                color: \"#ccc\",\r\n              },\r\n            },\r\n          },\r\n          interaction: {\r\n            mode: \"nearest\",\r\n            intersect: false,\r\n          },\r\n        },\r\n      });\r\n    },\r\n    updateChart() {\r\n      const selectedCryptoData = this.cryptos.find(\r\n        (crypto) => crypto.name === this.selectedCrypto\r\n      );\r\n\r\n      // Si un graphique existe déjà, on le détruit pour éviter les conflits\r\n      if (this.chart) {\r\n        this.chart.destroy();\r\n      }\r\n\r\n      // Recréer le graphique avec les nouvelles données\r\n      this.renderChart();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.cours-crypto {\r\n  padding: 1rem;\r\n  background-color: #1e1e2f;\r\n  color: white;\r\n  border-radius: 8px;\r\n  position: relative;\r\n  height: 500px; /* Ajusté pour inclure le menu déroulant */\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  font-size: 1.5rem;\r\n}\r\n\r\ncanvas {\r\n  max-width: 100%;\r\n  height: 350px; /* Espace réservé pour le graphique */\r\n  margin: auto;\r\n  display: block;\r\n}\r\n\r\n.dropdown-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\nlabel {\r\n  margin-right: 10px;\r\n  font-size: 1rem;\r\n  color: #ccc;\r\n}\r\n\r\nselect {\r\n  padding: 5px 10px;\r\n  font-size: 1rem;\r\n  border-radius: 5px;\r\n  border: none;\r\n  background-color: #2e2e3d;\r\n  color: #fff;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAc;;EAElBA,KAAK,EAAC;AAAoB;mBAHnC;;uBACEC,mBAAA,CAWM,OAXNC,UAWM,G,0BAVJC,mBAAA,CAAiC,YAA7B,0BAAwB,sBAC5BA,mBAAA,CAOM,OAPNC,UAOM,G,0BANJD,mBAAA,CAA8D;IAAvDE,GAAG,EAAC;EAAe,GAAC,6BAA2B,sB,gBACtDF,mBAAA,CAIS;IAJDG,EAAE,EAAC,eAAe;IALhC,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAK0CC,KAAA,CAAAC,cAAc,GAAAF,MAAA;IAAGG,QAAM,EAAAJ,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;yBACtEX,mBAAA,CAESc,SAAA,QARjBC,WAAA,CAMiCP,KAAA,CAAAQ,OAAO,EAAjBC,MAAM;yBAArBjB,mBAAA,CAES;MAF0BkB,GAAG,EAAED,MAAM,CAACE,IAAI;MAAGC,KAAK,EAAEH,MAAM,CAACE;wBAC/DF,MAAM,CAACE,IAAI,wBAPxBE,UAAA;2FAK0Cb,KAAA,CAAAC,cAAc,E,+BAMpDP,mBAAA,CAAkC;IAA1BG,EAAE,EAAC;EAAa,4B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}