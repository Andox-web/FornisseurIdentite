{"remainingRequest":"F:\\Manoa\\vaovao\\ITU\\S5\\Mr Rojo\\examen\\crypto-1\\FornisseurIdentite\\crypto\\affichage\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\Manoa\\vaovao\\ITU\\S5\\Mr Rojo\\examen\\crypto-1\\FornisseurIdentite\\crypto\\affichage\\src\\pages\\frontoffice\\CoursCrypto.vue?vue&type=style&index=0&id=a527bee6&lang=css","dependencies":[{"path":"F:\\Manoa\\vaovao\\ITU\\S5\\Mr Rojo\\examen\\crypto-1\\FornisseurIdentite\\crypto\\affichage\\src\\pages\\frontoffice\\CoursCrypto.vue","mtime":1738956092805},{"path":"F:\\Manoa\\vaovao\\ITU\\S5\\Mr Rojo\\examen\\crypto-1\\FornisseurIdentite\\crypto\\affichage\\node_modules\\css-loader\\index.js","mtime":1737957114353},{"path":"F:\\Manoa\\vaovao\\ITU\\S5\\Mr Rojo\\examen\\crypto-1\\FornisseurIdentite\\crypto\\affichage\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1737957108442},{"path":"F:\\Manoa\\vaovao\\ITU\\S5\\Mr Rojo\\examen\\crypto-1\\FornisseurIdentite\\crypto\\affichage\\node_modules\\postcss-loader\\src\\index.js","mtime":1737957113589},{"path":"F:\\Manoa\\vaovao\\ITU\\S5\\Mr Rojo\\examen\\crypto-1\\FornisseurIdentite\\crypto\\affichage\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1737957116215},{"path":"F:\\Manoa\\vaovao\\ITU\\S5\\Mr Rojo\\examen\\crypto-1\\FornisseurIdentite\\crypto\\affichage\\node_modules\\vue-loader\\lib\\index.js","mtime":1737957107578}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jcnlwdG8tc2VsZWN0b3IgewogIG1hcmdpbi1ib3R0b206IDE1cHg7Cn0KCi5jcnlwdG8tc2VsZWN0b3IgbGFiZWwgewogIG1hcmdpbi1yaWdodDogMTBweDsKICBmb250LXdlaWdodDogYm9sZDsKfQoKLmNyeXB0by1zZWxlY3RvciBzZWxlY3QgewogIHBhZGRpbmc6IDVweDsKICBmb250LXNpemU6IDE0cHg7CiAgYm9yZGVyLXJhZGl1czogNHB4OwogIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7Cn0K"},{"version":3,"sources":["CoursCrypto.vue"],"names":[],"mappings":";AAkMA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"CoursCrypto.vue","sourceRoot":"src/pages/frontoffice","sourcesContent":["<template>\n  <div class=\"content\">\n    <div class=\"container-fluid\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <div class=\"crypto-selector\">\n            <label for=\"cryptoSelect\">Sélectionner une crypto :</label>\n            <select v-model=\"selectedCrypto\" id=\"cryptoSelect\">\n              <option v-for=\"crypto in cryptos\" :key=\"crypto.id\" :value=\"crypto.id\">\n                {{ crypto.nom }}\n              </option>\n            </select>\n          </div>\n\n          <chart-card \n            :chart-data=\"filteredChartData\"\n            :chart-options=\"lineChart.options\"\n            :responsive-options=\"lineChart.responsiveOptions\"\n          >\n            <template slot=\"header\">\n              <h4 class=\"card-title\" v-if=\"selectedCrypto\">{{ selectedCrypto }} Chart</h4>\n              <p class=\"card-category\">24 Hours performance</p>\n            </template>\n            <template slot=\"footer\">\n              <!-- <div class=\"legend\">\n                <i class=\"fa fa-circle text-info\"></i> Bitcoin\n                <i class=\"fa fa-circle text-danger\"></i> Ethereum\n                <i class=\"fa fa-circle text-warning\"></i> BNB\n              </div> -->\n              <hr>\n              <div class=\"stats\">\n                <i class=\"fa fa-history\"></i> Updated 10 seconds ago\n              </div>\n            </template>\n          </chart-card>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <card>\n            <template slot=\"header\">\n              <h5 class=\"title\">Prix crypto actuel</h5>\n              <p class=\"category\">Mise à jour toutes les 10s</p>\n            </template>\n            <l-table :data=\"tableData.data\" :columns=\"tableData.columns\">\n              <template slot-scope=\"{ row }\">\n                <td>{{ row.nom }}</td>\n                <td>{{ row.prix }} $</td>\n              </template>\n            </l-table>\n            <div class=\"footer\">\n              <hr>\n              <div class=\"stats\">\n                <i class=\"fa fa-history\"></i> Updated 10 seconds ago\n              </div>\n            </div>\n          </card>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport ChartCard from 'src/components/Cards/ChartCard.vue';\nimport LTable from 'src/components/Table.vue';\nimport Card from '../../components/Cards/Card.vue';\n\nexport default {\n  components: {\n    LTable,\n    ChartCard,\n    Card\n  },\n  data() {\n    return {\n      selectedCrypto: 1,\n      cryptos: [],\n      lineChart: {\n        data: {\n          labels: [],\n          series: {\n            test: [10000, 12000, 13000, 14000, 15000, 16000, 17000, 18000]\n            // 2: [20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000],\n            // 3: [23000, 24000, 25000, 26000, 27000, 28000, 29000, 210000]\n          }\n        },\n        options: {\n          low: 0,\n          high: 80000,\n          showArea: false,\n          height: '245px',\n          axisX: {\n            showGrid: false\n          },\n          lineSmooth: true,\n          showLine: true,\n          showPoint: true,\n          fullWidth: true,\n          chartPadding: {\n            right: 50\n          }\n        },\n      },\n      tableData: {\n        data: [],\n        columns: ['Nom', 'Prix']\n      },\n      interval: null\n    };\n  },\n  computed: {\n    filteredChartData() {\n      return {\n        labels: this.lineChart.data.labels,\n        series: [this.lineChart.data.series.test || []]\n      };\n    }\n  },\n  watch: {\n    async selectedCrypto(newVal) {\n      if (newVal) {\n        await this.fetchCours();\n      }\n    }\n  },\n\n  methods: {\n    async fetchCryptos() {\n      try {\n        const response = await fetch('http://localhost:8081/cryptos');\n        const data = await response.json();\n        this.cryptos = data.map(c => c);\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des cryptos\", error);\n      }\n    },\n    async fetchCours() {\n      if (!this.selectedCrypto) return;\n      try {\n        const selected = this.selectedCrypto;\n        console.log(selected);\n        if (!selected) return;\n        console.log(\"fetching cours .\");\n\n        const response = await fetch(`http://localhost:8081/cryptos/cours?id=${selected}`);\n        \n        const data = await response.json();\n        console.log(data);\n        // this.lineChart.data.series = data.map(d => d.valeur);\n        // this.lineChart.data.series = [data.map(d => d.valeur)];\n        this.lineChart.data.series.test = data.map(d => d.valeur);\n\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération du cours\", error);\n      }\n    },\n    async fetchPrix() {\n      try {\n        const response = await fetch('http://localhost:8081/cryptos/prix');\n        const data = await response.json();\n        this.tableData.data = data.map(item => ({\n          nom: item.cryptomonnaie.nom,\n          prix: item.valeur\n        }));\n      } catch (error) {\n        console.error(\"Erreur lors de la récupération des prix\", error);\n      }\n    },\n    startAutoRefresh() {\n      this.interval = setInterval( async() => {\n       await this.fetchCours();\n       await this.fetchPrix();\n      }, 10000);\n    }\n  },\n  mounted() {\n    this.fetchCryptos().then(async () => {\n      await this.fetchCours();\n      await this.fetchPrix();\n      await this.startAutoRefresh();\n    });\n  },\n  beforeDestroy() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n};\n</script>\n\n\n<style>\n.crypto-selector {\n  margin-bottom: 15px;\n}\n\n.crypto-selector label {\n  margin-right: 10px;\n  font-weight: bold;\n}\n\n.crypto-selector select {\n  padding: 5px;\n  font-size: 14px;\n  border-radius: 4px;\n  border: 1px solid #ccc;\n}\n</style>\n"]}]}