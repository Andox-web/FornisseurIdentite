{"remainingRequest":"C:\\Users\\Zotah\\S5\\ROJO\\exam\\FornisseurIdentite\\crypto\\affichage\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Zotah\\S5\\ROJO\\exam\\FornisseurIdentite\\crypto\\affichage\\src\\components\\Cards\\ChartCard.vue?vue&type=style&index=0&id=6a01a57c&scoped=true&lang=css","dependencies":[{"path":"C:\\Users\\Zotah\\S5\\ROJO\\exam\\FornisseurIdentite\\crypto\\affichage\\src\\components\\Cards\\ChartCard.vue","mtime":1738573563774},{"path":"C:\\Users\\Zotah\\S5\\ROJO\\exam\\FornisseurIdentite\\crypto\\affichage\\node_modules\\css-loader\\index.js","mtime":1737957114353},{"path":"C:\\Users\\Zotah\\S5\\ROJO\\exam\\FornisseurIdentite\\crypto\\affichage\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1737957108442},{"path":"C:\\Users\\Zotah\\S5\\ROJO\\exam\\FornisseurIdentite\\crypto\\affichage\\node_modules\\postcss-loader\\src\\index.js","mtime":1737957113589},{"path":"C:\\Users\\Zotah\\S5\\ROJO\\exam\\FornisseurIdentite\\crypto\\affichage\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1737957116215},{"path":"C:\\Users\\Zotah\\S5\\ROJO\\exam\\FornisseurIdentite\\crypto\\affichage\\node_modules\\vue-loader\\lib\\index.js","mtime":1737957107578}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdC1jaGFydCB7CiAgaGVpZ2h0OiAzMDBweDsgLyogRMOpZmluaXIgdW5lIGhhdXRldXIgZml4ZSBwb3VyIGxlIGdyYXBoaXF1ZSAqLwogIHdpZHRoOiAxMDAlOyAvKiBTJ2Fzc3VyZXIgcXVlIGxlIGdyYXBoaXF1ZSBwcmVuZCB0b3V0ZSBsYSBsYXJnZXVyICovCn0KCi5jYXJkIHsKICBtYXJnaW46IDIwcHg7CiAgYm9yZGVyOiAxcHggc29saWQgI2NjYzsKICBib3JkZXItcmFkaXVzOiA4cHg7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKICBib3gtc2hhZG93OiAwIDRweCA4cHggcmdiYSgwLCAwLCAwLCAwLjEpOwp9CgouY2FyZC1oZWFkZXIgewogIHBhZGRpbmc6IDEwcHg7CiAgYmFja2dyb3VuZC1jb2xvcjogI2Y3ZjdmNzsKICBmb250LXNpemU6IDEuMmVtOwogIGZvbnQtd2VpZ2h0OiBib2xkOwp9CgouY2FyZC1mb290ZXIgewogIHBhZGRpbmc6IDEwcHg7CiAgYmFja2dyb3VuZC1jb2xvcjogI2Y3ZjdmNzsKfQo="},{"version":3,"sources":["ChartCard.vue"],"names":[],"mappings":";AA8KA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"ChartCard.vue","sourceRoot":"src/components/Cards","sourcesContent":["<template>\n  <div class=\"card\">\n    <div class=\"card-header\" v-if=\"$slots.header\">\n      <slot name=\"header\"></slot>\n    </div>\n    <div class=\"card-body\">\n      <div :id=\"chartId\" class=\"ct-chart\"></div>\n    </div>\n    <div class=\"card-footer\" v-if=\"$slots.footer\">\n      <slot name=\"footer\"></slot>\n    </div>\n  </div>\n</template>\n\n<script>\n  import Card from './Card.vue'\n\n  export default {\n    name: 'chart-card',\n    components: {\n      Card\n    },\n    props: {\n      chartType: {\n        type: String,\n        default: 'Line' // Line | Pie | Bar\n      },\n      chartData: {\n        type: Object,\n        required: true\n      },\n      chartOptions: {\n        type: Object,\n        default: () => {\n          return {\n            high: 500, // Définir une valeur élevée pour l'échelle du graphique\n            low: 0,    // Valeur minimale\n            showArea: true, // Style de graphique en aire (similaire à TradingView)\n            fullWidth: true, // S'étend sur toute la largeur\n            axisX: {\n              showGrid: false, // Masquer la grille sur l'axe X\n              showLabel: true, // Afficher les étiquettes sur l'axe X\n              offset: 60, // Espacement à gauche pour les étiquettes\n              labelOffset: {\n                x: 0,\n                y: 5\n              },\n              // Centrer le graphique sur la dernière valeur en décalant dynamiquement\n              axisLabelInterpolationFnc: (value) => {\n                return value // Retirer ou ajuster si nécessaire\n              }\n            },\n            axisY: {\n              showGrid: true, // Afficher la grille sur l'axe Y\n              offset: 60, // Espacement pour les étiquettes sur l'axe Y\n            },\n            chartPadding: {\n              right: 10, // Ajouter un peu de marge à droite\n            },\n          }\n        }\n      },\n      responsiveOptions: [Object, Array]\n    },\n    data () {\n      return {\n        chartId: 'no-id',\n        $Chartist: null,\n        chart: null,\n        chartData: {\n          labels: [],\n          series: []\n        }\n      }\n    },\n    watch: {\n  chartData: {\n    deep: true,\n    handler(newData) {\n      if (this.chart) {\n        this.chart.update(newData);\n      }\n    }\n  }\n},\n\n    methods: {\n      initChart () {\n        var chartIdQuery = `#${this.chartId}`\n        this.chart = this.$Chartist[this.chartType](chartIdQuery, this.chartData, this.chartOptions, this.responsiveOptions)\n        this.$emit('initialized', this.chart)\n\n        if (this.chartType === 'Line') {\n          this.animateLineChart()\n        }\n        if (this.chartType === 'Bar') {\n          this.animateBarChart()\n        }\n\n        // Centrer le graphique sur la dernière donnée (X-axis décalé)\n        this.chart.on('created', () => {\n          const lastLabel = this.chartData.labels[this.chartData.labels.length - 1];\n          const chartWidth = this.chart.svg.width();\n          this.chart.svg.translate(chartWidth - 100, 0); // Ajuster cette valeur si nécessaire\n        })\n      },\n      updateChartId () {\n        const currentTime = new Date().getTime().toString()\n        const randomInt = this.getRandomInt(0, currentTime)\n        this.chartId = `div_${randomInt}`\n      },\n      getRandomInt (min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min\n      },\n      animateLineChart () {\n        let seq = 0\n        let durations = 500\n        let delays = 80\n        this.chart.on('draw', (data) => {\n          if (data.type === 'line' || data.type === 'area') {\n            data.element.animate({\n              d: {\n                begin: 600,\n                dur: 700,\n                from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n                to: data.path.clone().stringify(),\n                easing: this.$Chartist.Svg.Easing.easeOutQuint\n              }\n            })\n          } else if (data.type === 'point') {\n            seq++\n            data.element.animate({\n              opacity: {\n                begin: seq * delays,\n                dur: durations,\n                from: 0,\n                to: 1,\n                easing: 'ease'\n              }\n            })\n          }\n        })\n        seq = 0\n      },\n      animateBarChart () {\n        let seq = 0\n        let durations = 500\n        let delays = 80\n        this.chart.on('draw', (data) => {\n          if (data.type === 'bar') {\n            seq++\n            data.element.animate({\n              opacity: {\n                begin: seq * delays,\n                dur: durations,\n                from: 0,\n                to: 1,\n                easing: 'ease'\n              }\n            })\n          }\n        })\n      }\n    },\n    async mounted () {\n      this.updateChartId()\n      const Chartist = await import('chartist')\n      this.$Chartist = Chartist.default || Chartist\n      this.initChart()\n    }\n  }\n</script>\n\n<style scoped>\n.ct-chart {\n  height: 300px; /* Définir une hauteur fixe pour le graphique */\n  width: 100%; /* S'assurer que le graphique prend toute la largeur */\n}\n\n.card {\n  margin: 20px;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.card-header {\n  padding: 10px;\n  background-color: #f7f7f7;\n  font-size: 1.2em;\n  font-weight: bold;\n}\n\n.card-footer {\n  padding: 10px;\n  background-color: #f7f7f7;\n}\n</style>\n"]}]}